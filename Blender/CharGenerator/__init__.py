import bpy
from os import system, listdir
from os.path import dirname, abspath, join
import math
# import shutil
# from PIL import Image

bl_info = {
    "name": "Render SFF Mugen",
    "author": "Xavier Merizalde",
    "version": (1, 0),
    "blender": (2, 78, 0),
    "location": "View3D > Toolshelf > Render SFF Mugen",
    "description": "Renders frames, crops images, converts images to PCX format, and generates a SFF file for Mugen.",
    "warning": "",
    "doc_url": "https://xaviermerizalde.wordpess.com",
    "tracker_url": "https://xaviermerizalde.wordpess.com",
    "support": "COMMUNITY",
    "category": "3D View",
}

PIL_UTIL_PATH = join(dirname( abspath( __file__) ), "pil_util.py")

def capture_frames(scene, start_frame, end_frame, output_dir):
    #system("delete c:\\tmp\\*.png")
    bpy.ops.render.render(animation=True)
    #for frame in range(start_frame, end_frame + 1):
    #    bpy.context.scene.frame_set(frame)
    #    print(type(output_dir))
    #    bpy.ops.render.render(write_still=True, scene=scene, filepath=join(output_dir, "frame_{0}.png".format(frame) ) )

def crop_images(input_dir, output_dir):
    system('python "{0}" crop_images "{1}" "{2}"'.format( PIL_UTIL_PATH, input_dir, output_dir ))

def convert_images(input_dir, output_dir):
    system('python "{0}" convert_images "{1}" "{2}"'.format( PIL_UTIL_PATH, input_dir, output_dir ))

def generate_sff_file(input_dir, output_file):
    pass
    #f = open(output_file, "w")
    #f.write("; This is a SFF file for Mugen.\n")
    #f.write("; It was generated by a Blender addon.\n")
    #f.write("; The sprites were generated from PNG files.\n")
    #f.write("; The PNG files were cropped and converted to PCX format.\n")
    #f.write("\n")

    #for file in listdir(input_dir):
    #    f.write("sprite %s = %s\n" % (file.replace(".pcx", ""), file))
    #f.close()

class RenderSffMugen(bpy.types.Operator):
    """Renders frames, crops images, converts images to PCX format, and generates a SFF file for Mugen."""

    bl_idname = "xpdmugen.sff_mugen"
    bl_label = "Render SFF Mugen"

    def execute(self, context):
        scene = context.scene

        wm = bpy.context.window_manager

        wm.progress_begin(0, 100)

        wm.progress_update(1)

        # Capture frames
        start_frame = scene.frame_start
        end_frame = scene.frame_end
        output_dir = dirname(scene.render.frame_path())
        capture_frames(scene, start_frame, end_frame, output_dir)

        wm.progress_update(25)

        # Crop images
        input_dir = output_dir
        output_dir = join(input_dir, "cropped")
        crop_images(input_dir, output_dir)

        wm.progress_update(50)

        # Convert images
        input_dir = output_dir
        output_dir = join(input_dir, "pcx")
        convert_images(input_dir, output_dir)

        wm.progress_update(75)

        # Generate SFF file
        input_dir = output_dir
        output_file = join(input_dir, "kmf.sff")
        generate_sff_file(input_dir, output_file)

        wm.progress_update(1)

        return {'FINISHED'}

def menu_RenderSffMugen(self, context):
    self.layout.operator(RenderSffMugen.bl_idname, text=RenderSffMugen.bl_label)

MALE_AVATAR_PATH = join( dirname( abspath(__file__) ), 'kfm.bvh' )

class ImportFightingAnimation(bpy.types.Operator):
    bl_idname = "xpdmugen.import_fighting_animation"
    bl_label = "Animacion de lucha"

    def execute(self, context):
        escena = context.scene
        camara_location = (0.0, -5.0, 1.0)
        camara_rotation = ( math.pi / 2 , 0.0, 0.0 )

        resultado = bpy.ops.import_anim.bvh(filepath = MALE_AVATAR_PATH , 
            axis_forward='-Z', axis_up='Y', filter_glob="*.bvh", target='ARMATURE', global_scale=0.025, 
            frame_start=0, use_fps_scale=False, update_scene_fps=False, update_scene_duration=False, 
            use_cyclic=False, rotate_mode='NATIVE')
        
        if resultado == {'FINISHED'}:
            camaras = [ obj for obj in escena.objects if obj.type == 'CAMERA']
            camara = None
            if len(camaras) == 0:
                resultado = bpy.ops.object.camera_add( view_align=False, 
                        enter_editmode=False, location=camara_location , rotation=camara_rotation )
                if resultado == {'FINISHED'}:
                    camaras = [ obj for obj in escena.objects if obj.type == 'CAMERA']
                    camara = camaras[0]    
            else:
                camara = camaras[0]
                camara.location.x = camara_location[0]
                camara.location.y = camara_location[1]
                camara.location.z = camara_location[2]
                camara.rotation.x = camara_rotation[0]
                camara.rotation.y = camara_rotation[1]
                camara.rotation.z = camara_rotation[2]
            # resultado = bpy.ops.view3d.object_as_camera()

            escena.frame_start = 1
            escena.frame_end = 281
        
        print("Armadura {0}".format(repr(resultado)) )
        return resultado
    
def menu_ImportFightingAnimation(self, context):
    self.layout.operator(ImportFightingAnimation.bl_idname, text=ImportFightingAnimation.bl_label)

def register():
    #bpy.types.INFO_MT_render.append( menu_Separator ) 

    bpy.utils.register_class( RenderSffMugen )
    bpy.types.INFO_MT_render.append( menu_RenderSffMugen )

    bpy.utils.register_class( ImportFightingAnimation )
    bpy.types.INFO_MT_add.append( menu_ImportFightingAnimation )


def unregister():
    # bpy.types.INFO_MT_render.remove( menu_Separator ) 

    bpy.utils.unregister_class( RenderSffMugen )
    bpy.types.INFO_MT_render.remove( menu_RenderSffMugen )

    bpy.utils.unregister_class( ImportFightingAnimation )
    bpy.types.INFO_MT_add.remove( menu_ImportFightingAnimation )


if __name__ == "__main__":
    register()
