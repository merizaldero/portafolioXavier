integer INPUT_CHANNEL = 1783;        // the secret channel the HUD is own
integer LISTEN_HANDLE;
float ROTATION_RATE = 1.0;      //  Rate of turning  
float FWD_THRUST = 25;        //  Forward thrust motor force 
float BACK_THRUST = 25;       //  Backup thrust
float VERTICAL_THRUST = 15;
vector linear_motor = <0,0,0>; // Keep a running linear motor value for better response
vector CAMARA_POS = <-7.0, 0, -8>; // <-7.0, 0.0, 3.0>;
vector CAMARA_TARGET = <0, 0.0, -15.0>; // <0.5, 0, 0>;
vector POS_INICIAL = <154, 33, 37.87>;
key KEY_PILOTO;
vector IMPULSO_RETORNO = <0,0,5>;
float RETORNO_MIN_DISTANCIA = 5.0;

inicializar_camara(){
    llOwnerSay("Ajustando Camara");
    llSetCameraEyeOffset( CAMARA_POS );
    llSetCameraAtOffset( CAMARA_TARGET );   
}

inicializar_vehiculo(){
    
    llSetVehicleType(VEHICLE_TYPE_AIRPLANE);
    
    llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY, 0.5);
    llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_EFFICIENCY, 0.5);
    llSetVehicleFloatParam(VEHICLE_ANGULAR_DEFLECTION_TIMESCALE, 100);
    llSetVehicleFloatParam(VEHICLE_LINEAR_DEFLECTION_TIMESCALE, 100);
    
    llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_TIMESCALE, 0.2);
    llSetVehicleFloatParam(VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE, 10);
    llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_TIMESCALE, 0.2);
    llSetVehicleFloatParam(VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE, 0.1);
    
    llSetVehicleVectorParam(VEHICLE_LINEAR_FRICTION_TIMESCALE, <5,5,5>);
    llSetVehicleVectorParam(VEHICLE_ANGULAR_FRICTION_TIMESCALE, <10,10,10>);
    llSetVehicleFloatParam(VEHICLE_HOVER_HEIGHT, 0.0);
    llSetVehicleFloatParam(VEHICLE_HOVER_EFFICIENCY, 0.0);
    llSetVehicleFloatParam(VEHICLE_HOVER_TIMESCALE, 1.0);
    llSetVehicleFloatParam(VEHICLE_BUOYANCY, 1.0);
    
    llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY, 0.2);
    llSetVehicleFloatParam(VEHICLE_VERTICAL_ATTRACTION_TIMESCALE, 3.0);
    
    llSetVehicleFloatParam(VEHICLE_BANKING_EFFICIENCY, 1.0);
    llSetVehicleFloatParam(VEHICLE_BANKING_MIX, 0.75);
    llSetVehicleFloatParam(VEHICLE_BANKING_TIMESCALE, 0.05);    
}

controlar(key id, integer level, integer edge){
    if(level & (CONTROL_LEFT | CONTROL_ROT_LEFT)) {
        llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION, <-ROTATION_RATE,0,0>);
    } else if(edge & (CONTROL_LEFT | CONTROL_ROT_LEFT)) {
       llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION, <0,0,0>);
    }
    if(level & (CONTROL_RIGHT | CONTROL_ROT_RIGHT)) {
        llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION, <ROTATION_RATE,0,0>);
    } else if(edge & (CONTROL_RIGHT | CONTROL_ROT_RIGHT)) {
        llSetVehicleVectorParam(VEHICLE_ANGULAR_MOTOR_DIRECTION, <0,0,0>);
    }

    if(level & CONTROL_FWD) {
        linear_motor.x = FWD_THRUST;
    } else if(edge & CONTROL_FWD) {
       linear_motor.x = 0;
    }
    if(level & CONTROL_BACK) {
        linear_motor.x = -BACK_THRUST;
    } else if(edge & CONTROL_BACK) {
        linear_motor.x = 0;
    }
    
    if(level & CONTROL_UP) {
        linear_motor.z = VERTICAL_THRUST;
    } else if(edge & CONTROL_UP) {
        linear_motor.z = 0;
    }
    if(level & CONTROL_DOWN) {
        linear_motor.z = -VERTICAL_THRUST;
    } else if(edge & CONTROL_DOWN) {
        linear_motor.z = 0;
    }
    llSetVehicleVectorParam(VEHICLE_LINEAR_MOTOR_DIRECTION, linear_motor);
    
}

default{
    state_entry(){
        llSetStatus(STATUS_PHYSICS, FALSE);
        llSetPos(POS_INICIAL);
        llSetRot(ZERO_ROTATION);
        LISTEN_HANDLE = llListen(INPUT_CHANNEL,"","","");
        llSay(0, "Globo Inicializado");
    }    
    state_exit(){
        llListenRemove(LISTEN_HANDLE);
    }
    listen(integer channel, string name, key id, string message){
        if(llToLower(message) == "si")    {
            KEY_PILOTO = id;
            state vuelo_pilotado;
        }
        else if(llToLower(message) == "reset")    {
            llResetScript();
        }
    }
    changed(integer change){
        if(change & CHANGED_LINK){
            
            inicializar_camara();
        }
    }
    touch_end(integer tocadores){
        if(tocadores == 1){
            llDialog( llDetectedKey(0), "Deseas Pilotear el Globo?", ["Si","No","Reset"], INPUT_CHANNEL );
        }
    }
}

state vuelo_pilotado{
    state_entry(){        
        LISTEN_HANDLE = llListen(INPUT_CHANNEL,"","","");
        //llRequestPermissions(KEY_PILOTO, PERMISSION_TAKE_CONTROLS | PERMISSION_CONTROL_CAMERA);
        llRequestPermissions(KEY_PILOTO, PERMISSION_TAKE_CONTROLS);
    }
    
    run_time_permissions(integer perm) {        
        if(perm & PERMISSION_TAKE_CONTROLS) {
            inicializar_vehiculo();
            llSetStatus(STATUS_PHYSICS, TRUE);
            llTakeControls(CONTROL_FWD | CONTROL_BACK | CONTROL_RIGHT | CONTROL_LEFT | CONTROL_ROT_RIGHT | CONTROL_ROT_LEFT | CONTROL_UP | CONTROL_DOWN, TRUE, FALSE);                 llMessageLinked(LINK_SET,0,"start","");
            llOwnerSay("Globo piloteado por " + llGetUsername(KEY_PILOTO) );
            controlar( KEY_PILOTO, CONTROL_UP , 0);
            llSleep(2);
            controlar( KEY_PILOTO, 0 , CONTROL_UP);
        }
    }
    
    listen(integer channel, string name, key id, string message){
        if(llToLower(message) == "si"){
            state retorno;
        }
    }
    control(key id, integer level, integer edge){
        controlar(id, level, edge);
    }
    state_exit(){
        llListenRemove(LISTEN_HANDLE);
        llMessageLinked(LINK_SET,0,"stop","");    // send 'stop' to any other scripts
        llSetStatus(STATUS_PHYSICS, FALSE);
        llReleaseControls();
        llOwnerSay("Globo deja de ser pilotado");
    }
   changed(integer change){
        if(change & CHANGED_LINK){
            llOwnerSay("Regresando");
            state retorno;
        }
    }
    
    touch_end(integer tocadores){
        if(tocadores == 1){
            llDialog( llDetectedKey(0), "Deseas Pilotear el Globo?", ["Si","No","Reset"], INPUT_CHANNEL );
        }
    }
    
}

state retorno{
    state_entry(){
        llSetStatus(STATUS_PHYSICS, FALSE);
        llSetRot(ZERO_ROTATION);
        llOwnerSay("Inicia Retorno");
        llSetTimerEvent(5);
    }
    state_exit(){
        llSetTimerEvent(0);
        llOwnerSay("Finaliza Retorno");
    }
    timer(){
        vector posicion = llGetPos();
        if( llVecDist( posicion, POS_INICIAL ) < RETORNO_MIN_DISTANCIA ){
            llResetScript();
        }
        llSetPos(posicion + IMPULSO_RETORNO);
        llSleep(2);
        llSetPos(POS_INICIAL);
    }
}